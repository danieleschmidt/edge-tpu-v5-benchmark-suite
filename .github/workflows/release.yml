name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      pre_release:
        description: 'Pre-release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "0.4.18"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: |
        uv sync --all-extras --dev
        uv add bump2version
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Bump version
      id: version
      run: |
        # Get current version
        CURRENT_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "Current version: $CURRENT_VERSION"
        
        # Bump version
        uv run bump2version ${{ github.event.inputs.version_type }} --dry-run --list | grep new_version= | cut -d= -f2 > new_version.txt
        NEW_VERSION=$(cat new_version.txt)
        echo "New version: $NEW_VERSION"
        
        # Actually bump version
        uv run bump2version ${{ github.event.inputs.version_type }}
        
        # Output for next jobs
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      run: |
        # Generate changelog since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "# Changelog" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Changes since $LAST_TAG" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> RELEASE_NOTES.md
        else
          echo "# Initial Release" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "First release of the Edge TPU v5 Benchmark Suite." >> RELEASE_NOTES.md
        fi
    
    - name: Commit version bump
      run: |
        git add .
        git commit -m "Bump version to ${{ steps.version.outputs.version }}"
        git tag ${{ steps.version.outputs.tag }}
        git push origin main --tags

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: prepare-release
    if: always() && !cancelled()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.prepare-release.outputs.tag || github.ref }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "0.4.18"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: uv sync --all-extras --dev
    
    - name: Run tests
      run: |
        uv run pytest tests/ -v \
          --cov=src \
          --cov-report=xml \
          --cov-report=term \
          --cov-fail-under=80
    
    - name: Run security checks
      run: |
        uv run bandit -r src/
        uv run ruff check src/ tests/
    
    - name: Build package
      run: uv build
    
    - name: Verify package
      run: |
        uv run twine check dist/*
        uv run python -m pip install dist/*.whl
        uv run python -c "import edge_tpu_v5_benchmark; print(edge_tpu_v5_benchmark.__version__)"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-dist
        path: dist/
        retention-days: 30

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test]
    if: always() && !cancelled() && !failure()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.prepare-release.outputs.tag || github.ref }}
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-dist
        path: dist/
    
    - name: Extract version from tag
      id: version
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=${{ needs.prepare-release.outputs.version }}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT
    
    - name: Generate release notes
      id: release_notes
      run: |
        if [ -f "RELEASE_NOTES.md" ]; then
          cat RELEASE_NOTES.md > release_notes.txt
        else
          # Generate from recent commits if triggered by tag push
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "# Changelog" > release_notes.txt
            echo "" >> release_notes.txt
            echo "## Changes since $LAST_TAG" >> release_notes.txt
            echo "" >> release_notes.txt
            git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> release_notes.txt
          else
            echo "# Release ${{ steps.version.outputs.version }}" > release_notes.txt
            echo "" >> release_notes.txt
            echo "New release of the Edge TPU v5 Benchmark Suite." >> release_notes.txt
          fi
        fi
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Release ${{ steps.version.outputs.version }}
        body_path: release_notes.txt
        files: |
          dist/*
        draft: false
        prerelease: ${{ github.event.inputs.pre_release == 'true' }}
        generate_release_notes: true
        make_latest: ${{ github.event.inputs.pre_release != 'true' }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [create-release]
    if: success() && !github.event.inputs.pre_release
    environment: 
      name: pypi
      url: https://pypi.org/p/edge-tpu-v5-benchmark
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  publish-docker:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: [create-release]
    if: success()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.prepare-release.outputs.tag || github.ref }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=${{ needs.prepare-release.outputs.version }}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          ghcr.io/${{ github.repository }}:latest
        labels: |
          org.opencontainers.image.title=Edge TPU v5 Benchmark Suite
          org.opencontainers.image.description=Comprehensive benchmark harness for Google TPU v5 edge cards
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max