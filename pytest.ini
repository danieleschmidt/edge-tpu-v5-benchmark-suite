[tool:pytest]
# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test execution options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --showlocals
    --durations=10
    --cov=src
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --junitxml=test-results.xml

# Minimum version
minversion = 7.0

# Test markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    hardware: marks tests that require TPU hardware
    gpu: marks tests that require GPU
    network: marks tests that require network access
    external: marks tests that require external services
    benchmark: marks tests that perform actual benchmarking
    unit: marks tests as unit tests (fast, isolated)
    functional: marks tests as functional tests
    regression: marks tests as regression tests
    smoke: marks tests as smoke tests (basic functionality)
    security: marks tests as security tests
    performance: marks tests as performance tests

# Timeout configuration
timeout = 300
timeout_method = thread

# Warnings configuration
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning:pkg_resources.*
    ignore::PendingDeprecationWarning
    ignore::ResourceWarning
    ignore:.*unclosed.*:ResourceWarning

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Temporary directory configuration
tmp_path_retention_count = 3
tmp_path_retention_policy = failed

# Collection configuration
collect_ignore = [
    setup.py,
    build,
    dist,
]

# Doctest configuration
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL

# Coverage configuration
[coverage:run]
source = src
branch = true
parallel = true
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */site-packages/*
    */venv/*
    */.venv/*

[coverage:report]
show_missing = true
skip_covered = false
skip_empty = true
precision = 2
exclude_lines =
    pragma: no cover
    def __repr__
    def __str__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov
show_contexts = true

[coverage:xml]
output = coverage.xml