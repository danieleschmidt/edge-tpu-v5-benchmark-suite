# Security Scanning Workflow for Edge TPU v5 Benchmark Suite
# Save as: .github/workflows/security.yml

name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install pip-audit
        run: pip install pip-audit
        
      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=security-report.json
          pip-audit --format=sarif --output=security-results.sarif
        continue-on-error: true
        
      - name: Upload security results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: security-results.sarif
          
      - name: Upload security report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-report
          path: security-report.json

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    steps:
      - uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: +security-and-quality
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install cyclonedx-bom
          
      - name: Generate SBOM
        run: |
          cyclonedx-py --format json --output sbom.json
          cyclonedx-py --format xml --output sbom.xml
          
      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: |
            sbom.json
            sbom.xml

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run Truffelhog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: edge-tpu-v5-benchmark:security-scan
          cache-from: type=gha
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'edge-tpu-v5-benchmark:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install pip-licenses
        run: pip install pip-licenses
        
      - name: Install project dependencies
        run: pip install -e .
        
      - name: Check licenses
        run: |
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --format=csv --output-file=licenses.csv
          
      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: |
            licenses.json
            licenses.csv

  security-report:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql-analysis, sbom-generation, secret-scan, container-scan, license-check]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "Generated on: $(date)" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Scan Results:" >> security-summary.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-summary.md
          echo "- SBOM Generation: ${{ needs.sbom-generation.result }}" >> security-summary.md
          echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-summary.md
          echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-summary.md
          echo "- License Check: ${{ needs.license-check.result }}" >> security-summary.md
          
      - name: Upload security summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md